name: AI Code Review

on:
  workflow_dispatch:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.AI_API_KEY }}
      MODEL: ${{ secrets.AI_MODEL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Build prompt
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1 || true
          git diff --unified=0 origin/${{ github.base_ref }} || true > diff.patch
          {
            echo "Relis ce patch et donne des remarques concises:"
            echo
            cat diff.patch
          } > prompt.txt

      - name: Call OpenAI
        id: ask
        run: |
          set -euo pipefail
          test -n "$OPENAI_API_KEY" || { echo "AI_API_KEY manquant"; exit 1; }
          test -n "$MODEL" || { echo "AI_MODEL manquant"; exit 1; }

          body=$(jq -n --arg model "$MODEL" --rawfile p prompt.txt \
            '{model:$model,
              messages:[
                {role:"system",content:"Tu es un relecteur de code strict. Réponds en français, par puces, avec exemples courts."},
                {role:"user",content:$p}
              ],
              temperature:0.2}')

          resp=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$body")

          txt=$(echo "$resp" | jq -r '.choices[0].message.content // ""')
          printf 'txt<<EOF\n%s\nEOF\n' "$txt" >> "$GITHUB_OUTPUT"
          echo "$txt" > review.txt

      - name: Upload review as artifact (non-PR)
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ai-review
          path: review.txt

      - name: Comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('review.txt','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "### Relecture IA\n\n" + body
            })
